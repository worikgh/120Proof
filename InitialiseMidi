#!/usr/bin/perl -w
use strict;

## Initialise the midi connections


## Find what MIDI connections are needed and wait for them. 
sub wait_for_midi( $ ) {
    my $cfg_fn = shift or die;
    
    open(my $cfg, $cfg_fn) or die $!;

    ## The keys of %connections are the MIDI devices that must exist,
    ## and the values are 0 initially and set to 1 if the connection
    ## found
    my %connections = ();
    my $flag = 0;
    while(my $line = <$cfg>){
	$line =~ /MIDI_Connections/ and $flag = 1 and next;
	$line =~ /^\s*#/ and next;
	$line =~ /^\s*$/ and $flag = 0;
	if($flag){
	    my ($c1, $c2) = process_line($line);
	    $connections{$c1} = 0;
	    $connections{$c2} = 0;
	}
    }

    my $start = time();
    while(1){
	my $now = time();
	$now - $start > 30 and die "Cannot get all connections.  Failed: " .
	    join(', ', grep{$connections{$_} == 0} keys(%connections));
	my @aconnect_l = `aconnect -l`;
	open(my $out, ">>/tmp/ac.txt") or die $!;
	print $out scalar(localtime())."\n";
	print $out @aconnect_l;
	print $out "\n";
	
	my $lhs = undef;
	foreach my $ac (@aconnect_l){
	    chomp $ac;
	    ## client 28: 'Launchpad X' [type=kernel,card=3]
	    if ($ac =~ /^client \d+: '([^\']+)'/){
		$lhs = $1;
		next;
	    }
	    
	    ##     0 'Launchpad X MIDI 1'
	    if($ac =~ /^\s+\d+\s+'\s*(\S[^']+\S)\s*'/){
		my $rhs = $1;
		$connections{"$lhs:$rhs"} = 1;
		next;
	    }

	    ##      Connecting To: 128:0, 131:0
	    ##      Connected From: 128:0

	    if($ac =~ /^\s+Conn/){
		next;
	    }
	    die "\"$ac\"";
	}
	## Loop exit condition
	my @disconnected = grep{$connections{$_} == 0} keys(%connections);
	@disconnected or last;
	print "Not connected:\n\t".join("\n\t", @disconnected)."\n";
	sleep 1;
    }
}

## Extract the MIDI connections out of the config file
sub process_line( $ ){
    my $line = shift or die;
    chomp $line;

    $line =~ /^([^\t]+)\t([^\t]+)$/  or die $line;
    return ($1, $2);
}    

sub set_up_midi( $ ) {
    my $cfg_fn = shift or die;

    ## Map port:device  names to string
    my %midi_devices_by_num = ();
    ## Map port:device  string to names 
    my %midi_devices_by_str = ();
    
    ## Get all the connections devices
    my @aconnect_l = `aconnect -l`;

    ## Store the existing connections in a way that can be passed to
    ## `aconnect -d`.  Each connection that we to delete is mentioned
    ## in a "Connecting To" and in a "Connected From" clause.  The
    ## keys of the HASHs are the strings for `aconnect -d`
    my %existing_connections_to = ();
    my %existing_connections_from = ();
    my $port_str = undef;
    my $port_num = undef;
    my $dev_num = undef;
    my $dev_str =  undef;

    foreach my $ac  (@aconnect_l){
	chomp $ac;
	# client 24: 'pisound' [type=kernel,card=2]
	if ($ac =~ /^client (\d+): '([^\']+)'/){
	    $port_num = $1;
	    $port_str = $2;
	    next;
	}

	#     0 'pisound MIDI PS-0N78HB5'
	if($ac =~ /^\s+(\d+)\s+'\s*(\S[^']+\S)\s*'/){
	    $dev_num = $1;
	    $dev_str =  $2;

	    ## Have port:dev as string and number
	    $midi_devices_by_str{"$port_str:$dev_str"} = [$port_num, $dev_num];
	    $midi_devices_by_num{"$port_num:$dev_num"} = [$port_str, $dev_str];
	    next;
	}
	#	Connecting To: 129:0[real:0], 130:0, 131:0
	if($ac =~ /^\s+Connecting To: (.+)\s*$/){
	    my $con_str = $1;
	    my @con_str = split(/,\s*/, $con_str);

	    ## @con_str is an array of port:dev that this device is
	    ## connectred to
	    
	    foreach my $pair (map{/^\s*(\d+):(\d+)/; [$1,$2]} @con_str){
		my $delete_args = "$port_num:$dev_num $$pair[0]:$$pair[1]";

		# One side of the equation
		$existing_connections_to{$delete_args} = 1;
	    }
	    next;
	}
	#	Connected From: 24:0, 28:0, 28:1, 32:0, 129:0
	if($ac =~ /^\s+Connected From:\s+(.+)/){
	    my $con_str = $1;
	    my @con_str = split(/,\s*/, $con_str);

	    ## @con_str is an array of port:dev that connets to this
	    ## device

	    foreach my $pair (map{/^\s*(\d+):(\d+)/; [$1,$2]} @con_str){
		my $delete_args = "$$pair[0]:$$pair[1] $port_num:$dev_num";

		# # The otehr side of the equation
		$existing_connections_from{$delete_args} = 1;
	    }
	    next;
	}	    
    }

    ## The connections that have to be deleted will be in both HASHs.
    ## Initialise the list of connections to delete to all connections
    my %connections_to_delete = ();
    foreach my $to (sort keys(%existing_connections_from)){
	if (defined($existing_connections_to{"$to"})){
	    $connections_to_delete{$to} = 1;
	}
    }
    ## %connections_to_delete the keys are strings to pass to
    ## %`aconnect -d` and are all MIDI connections

    ## Connections that are not made are not in connections_to_delete,
    ## but if they are in the configuration file put them here.
    my %connections_to_make = ();

    ## Store the connections requested in the config file
    my @connections = ();
    
    ## Read in the midi connections that are wanted from the
    ## configuration file
    open(my $cfg, $cfg_fn) or die $!;
    my $flag = 0;
    while(my $line = <$cfg>){
	$line =~ /^MIDI_Connections/ and $flag = 1 and next;
	$line =~ /^\s*#/ and next; ## Comments
	if($line =~ /^\s*$/){
	    $flag = 0;  # End of a section
	    next;
	}
	if($flag){
	    my ($c1, $c2) = process_line($line);
	    push(@connections, [$c1, $c2]);
	}
    }

    ## Filter %connections_to_delete to remove the ones from the
    ## configuration file that are to keep
    my %delt_with = (); ## The same pair can be in @connections more than once
    foreach my $pair (@connections){
	my $from_dev = $midi_devices_by_str{"$$pair[0]"};
	defined $from_dev or die "No MIDI device for: $$pair[0]";
	my $to_dev = $midi_devices_by_str{"$$pair[1]"};
	defined $to_dev or die "No MIDI device for: $$pair[1]";
	my $key = join(":", @$from_dev)." ".  join(":", @$to_dev);
	defined($delt_with{$key}) and next;
	$delt_with{$key} = 1;
	if(defined($connections_to_delete{"$key"})){
	    delete($connections_to_delete{"$key"});
	}else{
	    ## Connection in config but not made
	    $connections_to_make{"$key"} = 1;
	}
    }

    ## Got all the connections that need to be deleted.
    my @to_delete =  keys(%connections_to_delete);

    sub del_con( $ ) {
	my ($l) = @_;
	my $cmd = "aconnect -d $l";
	`$cmd`;
	print STDERR "del_con($l)\n";
	$? == 0 or print STDERR "Failed $?: $cmd \n";
    }
    map {&del_con($_)} @to_delete;
    # print("Finished\n");

    ## Now make the connections
    ## Make new connections
    sub make_con( $ ) {
	my ($l) = @_;
	my $cmd = "aconnect $l";
	`$cmd`;
	print STDERR "make_con($l)\n";
	$? == 0 or print STDERR "Failed $?: $cmd \n";
    }
    foreach my $l (keys %connections_to_make){
	&make_con($l);
    }
}

			  
my $cfg_fn = shift or die "pass a configuration file";
print "InitialiseMidi: Before waiting\n";
&wait_for_midi( $cfg_fn );
print "InitialiseMidi: Before setup\n";
&set_up_midi( $cfg_fn );
print "InitialiseMidi: Finished\n";

