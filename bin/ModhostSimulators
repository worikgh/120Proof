#!/usr/bin/perl -w
use strict;

use IO::Socket::INET;

use lib("$ENV{'Home120Proof'}/Perl");
use One20Proof qw | $PEDAL_DIR $MODHOST_PORT |;


## Probably want to ignore some boards.  Pass the names of boards to
## ignore on the commandline

## Pedals are based on the names of the instruments.  Four for each
## instrument
my @pedal_boards = &One20Proof::get_pedal_names();


## Get the directory to run in
my $home_dir = $ENV{"Home120Proof"} or die '$ENV{"Home120Proof"} is not set';
-d $home_dir or die "\$home_dir($home_dir) not a directory";

## The directory to write the files that the pedal driver reads to
## control the simulatons
my $pedal_dir = "$One20Proof::PEDAL_DIR";
-d $pedal_dir or die "$!: $pedal_dir";
-x $pedal_dir or die "$!: $pedal_dir";

my $mod_host_port_p = $One20Proof::MODHOST_PORT;

my %modep_simulation_commands = &One20Proof::get_modep_simulation_commands(\@pedal_boards);
my @add = @{$modep_simulation_commands{add}};
my @param = @{$modep_simulation_commands{param}};
my @jack_initial = @{$modep_simulation_commands{jack_initial}};
my %jack_activation =  %{$modep_simulation_commands{jack_activation}};
open(my $fh_device_map, ">$ENV{Home120Proof}/Device_Map.txt") or die $!;
print $fh_device_map join "\n", map{$modep_simulation_commands{number_name}->{$_}."\t=>\teffect_".$_} sort{$a<=>$b} keys %{$modep_simulation_commands{number_name}};
close $fh_device_map or die $!;

## Create the files of pedal instructions
foreach my $p (sort keys %jack_activation){
    ## `$p` is the name of the ttl file.  To be the name of the pedal
    ## file it is best to delete the suffix, as the pedal file is not
    ## a turtle format file
    $p =~ /(.+)\.ttl$/ or die $p;
    my $_f = $1;
    grep {/$_f/} @pedal_boards or next;
    
    my $fn = "$pedal_dir/$p";
    $fn =~ s/\.ttl$// or die $p;
    open(my $out, ">$fn") or die $fn;
    my $contents = join("\n", @{$jack_activation{$p}})."\n";
    print $out $contents;
    close $out or die "$!: $fn";
}

## Set up the effects, and the arameters
my @mh_commands = ();
push(@mh_commands, @add);
push(@mh_commands, @param);
&mod_host(\@mh_commands);

foreach my $jcmd ( @jack_initial ) {
    &One20Proof::handle_jack( "connect $jcmd" );
}



## From select(2) section of perlfunc
# sub fhbits {
#     my @fhlist = @_;
#     my $bits = "";
#     for my $fh (@fhlist) {
# 	vec($bits, fileno($fh), 1) = 1;
#     }
#     return $bits;
# }

# sub handle_jack( $ ){
#     ## Passed a Jack command execute it.  There are two: "connect"
#     ## and "disconnect"
#     my $cmd = shift or die;
#     # warn "$cmd ";
#     if($cmd =~ /^connect (\S+)\s+(\S+)\s*$/){
# 	## Commanded to make a connection.  Check first if it exists
# 	## and there is nothing to do
# 	if( ! &One20Proof::test_jack_connection($1, $2)){
# 	    # print STDERR "connect $1\t$2\n";
# 	    print `jack_connect $1 $2`;
# 	}
#     }elsif($cmd =~ /^disconnect (\S+)\s+(\S+)\s*$/){
# 	if(  &One20Proof::test_jack_connection($1, $2)){
# 	    print `jack_disconnect $1 $2`;
# 	}
#     }
# }

## `handle_mh_cmd` and `mod_host` set up the LV2 simulators.
## `mod_host` is passed an array of commands to send to `mod-host`
sub handle_mh_cmd( $$ ) {
    my ($sock, $cmd) = @_;
    # warn "handle_mh_cmd(SOCK, $cmd)\n";
    print $sock "$cmd\n";

    my $result = '';
    my $r = &One20Proof::fhbits($sock);
    my $res = '';
    my ($nfound, $timeleft) =
	select(my $rout = $r, my $wout = undef, my $eout = undef,
	       0.5);
    # warn "handle_mh_cmd: \$nfound $nfound\n";
    if($nfound){
	my $os = 0;
	while(my $c = read($sock, $res, 1)){
	    if($c != 1 or
	       ord($res) == 0){
		last;
	    }
	    $result .=  $res;
	}
    }
    # warn "handle_mh_cmd: \$result $result\n";
    if($result =~ /resp ([\-0-9]+)/){
	# If status is a negative number an error has
	# occurred. The table below shows the number of each
	# error.
	
	# status 	error
	# -1 	ERR_INSTANCE_INVALID
	# -2 	ERR_INSTANCE_ALREADY_EXISTS
	# -3 	ERR_INSTANCE_NON_EXISTS
	# -4 	ERR_INSTANCE_UNLICENSED
	# -101 	ERR_LV2_INVALID_URI
	# -102 	ERR_LV2_INSTANTIATION
	# -103 	ERR_LV2_INVALID_PARAM_SYMBOL
	# -104 	ERR_LV2_INVALID_PRESET_URI
	# -105 	ERR_LV2_CANT_LOAD_STATE
	# -201 	ERR_JACK_CLIENT_CREATION
	# -202 	ERR_JACK_CLIENT_ACTIVATION
	# -203 	ERR_JACK_CLIENT_DEACTIVATION
	# -204 	ERR_JACK_PORT_REGISTER
	# -205 	ERR_JACK_PORT_CONNECTION
	# -206 	ERR_JACK_PORT_DISCONNECTION
	# -301 	ERR_ASSIGNMENT_ALREADY_EXISTS
	# -302 	ERR_ASSIGNMENT_INVALID_OP
	# -303 	ERR_ASSIGNMENT_LIST_FULL
	# -304 	ERR_ASSIGNMENT_FAILED
	# -401 	ERR_CONTROL_CHAIN_UNAVAILABLE
	# -402 	ERR_LINK_UNAVAILABLE
	# -901 	ERR_MEMORY_ALLOCATION
	# -902 	ERR_INVALID_OPERATION

	#     A status zero or positive means that the command was
	#     executed successfully. In case of the add command,
	#     the status returned is the instance number. The
	#     value field currently only exists for the param_get
	#     command.
	if($1 < 0 and $1 != -2){
	    print  STDERR ">> FAIL $cmd >>  $result\n";
	}else{
	    # print  STDERR ">> SUCCESS $cmd >>  $result\n";
	    return 1;
	}
    }else{
	print STDERR ">> Unexpected result: $result ";
    }
    return 0;
}    
sub mod_host( $ ){
    my $cmds = shift or die;
    my @cmds = @$cmds;

    my $remote = "localhost";

    my $sock = new IO::Socket::INET( PeerAddr => 'localhost',
				     PeerPort => $mod_host_port_p, 
				     Proto => 'tcp') or
	die "$!: Failed to connect to mod-host localhost:$mod_host_port_p ".
	"lsof -i :$mod_host_port_p: ".`lsof -i :$mod_host_port_p` . ' '; 

    ## Debugging why some effects randomly fail to be added
    my $failed = 0;
    
    foreach my $cmd (@cmds){
	# warn "Process: \$cmd($cmd) \n";
	# print STDERR  "mod-host: $cmd\n";
	if(!$failed){
	    &handle_mh_cmd($sock, $cmd);
	}
	## If command was an `add` check the effects got added
	if($cmd =~ /^add.+\s(\d+)/){
	    # print STDERR "$cmd\n";
	    # warn "Before jack_lsp\n";
	    my $jack = grep{/effect_$1/} `jack_lsp`;
	    # warn "after jack_lsp\n";
	    if(!$jack){
		print STDERR "$cmd: effect_$1 failed\n";
		$failed = 1;
	    }else{
		$failed = 0;
		# print STDERR "Got effect_$1\n";
	    }
	}
    }
}


