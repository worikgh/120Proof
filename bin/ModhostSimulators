#!/usr/bin/perl -w
use strict;

use IO::Socket::INET;

## Read the output of `ExtractModep` and set up the LV2 simulators,
## and Jack pipes for the pedal boards defined by Modep.  Also set up
## the "activation" files in `$pedal_dir` to put the definitions of
## Jack pipes (and later Modhost control parameters of control
## simulators).

## Get the directory to run in
my $home_dir = $ENV{"Home120Proof"} or die '$ENV{"Home120Proof"} is not set';
-d $home_dir or die "\$home_dir($home_dir) not a directory";


## FIXME  Do not need to do this(??)
## chdir $home_dir or die "$!: Cannot chdir $home_dir";

## The file written by ExtractModep
my $modep_command_fn = "$home_dir/modep_commands.txt";

## The directory to write the files that the pedal driver reads to
## control the simulatons
my $pedal_dir = "$home_dir/pedal/PEDALS/";
-d $pedal_dir or die "$!: $pedal_dir";
-x $pedal_dir or die "$!: $pedal_dir";

my $mod_host_port_p = 9116;

## Variables to drive main loop
my $NAME; # Current pedal board
my $section; # Two sections 'activation' and 'persistent'
my @mh_commands = (); # The `mod-host` simulator definitions
my @jack_commands = (); # The persistent Jack connetions.  Make noiw

# The commands to activate a pedal board. Initialised for each pedal
# board
my @activation_commands; 





## From select(2) section of perlfunc
sub fhbits {
    my @fhlist = @_;
    my $bits = "";
    for my $fh (@fhlist) {
	vec($bits, fileno($fh), 1) = 1;
    }
    return $bits;
}

sub handle_jack( $ ){
    ## Passed a Jack command execute it.  There are two: "connecyt"
    ## and "disconnect"
    my $cmd = shift or die;

    if($cmd =~ /^connect (\S+)\s+(\S+)\s*$/){
	## Commanded to make a connection.  Check first if it exists
	## and there is nothing to do
	if( ! `$home_dir/bin/testJackConnection $1 $2`){
	    # print STDERR "connect $1\t$2\n";
	    print `jack_connect $1 $2`;
	}
    }elsif($cmd =~ /^disconnect (\S+)\s+(\S+)\s*$/){
	if(`$home_dir/bin/testConnection $1 $2`){
	
	    print `jack_disconnect $1 $2`;
	}
    }
}

## `handle_mh_cmd` and `mod_host` set up the LV2 simulators.
## `mod_host` is passed an array of commands to send to `mod-host`
sub handle_mh_cmd( $$ ) {
    my ($sock, $cmd) = @_;
    print $sock "$cmd\n";

    my $result = '';
    my $r = fhbits($sock);
    my $res = '';
    my ($nfound, $timeleft) =
	select(my $rout = $r, my $wout = undef, my $eout = undef,
	       0.5);
    if($nfound){
	my $os = 0;
	while(my $c = read($sock, $res, 1)){
	    if($c != 1 or
	       ord($res) == 0){
		last;
	    }
	    $result .=  $res;
	}
    }
    if($result =~ /resp ([\-0-9]+)/){
	# If status is a negative number an error has
	# occurred. The table below shows the number of each
	# error.
	
	# status 	error
	# -1 	ERR_INSTANCE_INVALID
	# -2 	ERR_INSTANCE_ALREADY_EXISTS
	# -3 	ERR_INSTANCE_NON_EXISTS
	# -4 	ERR_INSTANCE_UNLICENSED
	# -101 	ERR_LV2_INVALID_URI
	# -102 	ERR_LV2_INSTANTIATION
	# -103 	ERR_LV2_INVALID_PARAM_SYMBOL
	# -104 	ERR_LV2_INVALID_PRESET_URI
	# -105 	ERR_LV2_CANT_LOAD_STATE
	# -201 	ERR_JACK_CLIENT_CREATION
	# -202 	ERR_JACK_CLIENT_ACTIVATION
	# -203 	ERR_JACK_CLIENT_DEACTIVATION
	# -204 	ERR_JACK_PORT_REGISTER
	# -205 	ERR_JACK_PORT_CONNECTION
	# -206 	ERR_JACK_PORT_DISCONNECTION
	# -301 	ERR_ASSIGNMENT_ALREADY_EXISTS
	# -302 	ERR_ASSIGNMENT_INVALID_OP
	# -303 	ERR_ASSIGNMENT_LIST_FULL
	# -304 	ERR_ASSIGNMENT_FAILED
	# -401 	ERR_CONTROL_CHAIN_UNAVAILABLE
	# -402 	ERR_LINK_UNAVAILABLE
	# -901 	ERR_MEMORY_ALLOCATION
	# -902 	ERR_INVALID_OPERATION

	#     A status zero or positive means that the command was
	#     executed successfully. In case of the add command,
	#     the status returned is the instance number. The
	#     value field currently only exists for the param_get
	#     command.
	if($1 < 0 and $1 != -2){
	    print  STDERR ">> FAIL $cmd >>  $result\n";

	    # Links into `process_modep.pl` which reads STDOUT
	    print  ">> FAIL $cmd >>  $result\n";
	}else{
	    # print  ">> SUCCESS $cmd >>  $result\n";
	}
    }
}    
sub mod_host( $ ){
    my $cmds = shift or die;
    my @cmds = @$cmds;

    my $remote = "localhost";

    my $sock = new IO::Socket::INET( PeerAddr => 'localhost',
				     PeerPort => $mod_host_port_p, 
				     Proto => 'tcp') or
	die "$!: Failed to connect to mod-host localhost:$mod_host_port_p ".
	"lsof -i :$mod_host_port_p: ".`lsof -i :$mod_host_port_p` . ' '; 

    ## Debugging why some effects randomly fail to be added
    my $failed = 0;
    
    foreach my $cmd (@cmds){

	# print STDERR  "mod-host: $cmd\n";
	if(!$failed){
	    &handle_mh_cmd($sock, $cmd);
	}
	## If command was an `add` check the effects got added
	if($cmd =~ /^add.+\s(\d+)/){
	    # print STDERR "$cmd\n";
	    my $jack = grep{/effect_$1/} `jack_lsp`;
	    if(!$jack){
		print STDERR "effect_$1 failed\n";
		$failed = 1;
	    }else{
		$failed = 0;
		# print STDERR "Got effect_$1\n";
	    }
	}
    }
}


open(my $cmds, $modep_command_fn) or die $!;

foreach my $line(<$cmds>){
    chomp $line;

    ## ignore comments ("#" as first character of line) and blank lines
    $line =~ /^\s*#/ and next;
    $line =~ /\S/ or next;

    if($line =~ /^NAME\s+(.+)\s*$/){

	## Got the name of a pedal board and in the section describing
	## persistent LV2 simulators and Jack connections
	$NAME = $1;
	$section = "persistent";

	@activation_commands = ();
	next;
    }
    if($line =~ /^ACTIVATE\s*$/){
	## The commands to put in the activation filaes, that `driver`
	## uses to set up and tear downb pedal board simulations in
	## real time

	## Today 2022-06-01 "set up and tear downb pedal board
	## simulations" means Jack connections.  But in the future it
	## will include MIDI connecti9ons and mod-host command.  For
	## example the plugin FluidOrgans is an LV2 simulator that
	## takes MIDI as input.  The SooperLooper LV2 plugin has the
	## normal looper controlls (record, play, reset...) that are
	## implemenmtyed as `mod-host` `param` commands and should be
	## assigned to the pedal.
	$section = "activate";
	next;
    }
    if($line =~ /^ENDS\s*$/){

	## The description of the effect has ended, so write
	## activation file
	my $fn = $pedal_dir.$NAME;
	open(my $out, ">$fn") or die "$!: $fn ";
	print $out join("\n", @activation_commands)."\n";
	close($out) or die "$!: $fn ";
	next;
    }

    ## Got a command for `mod-host` or for Jack
    $line =~ /^mh (.+)\s*$/ or die "Invalid line: $line";

    my $command = $1;
    if($command =~ /^connect\s+.+\s*$/){	
	if($section eq 'activate'){
	    ## Commands to be used by a pedal to activate an effect
	    push(@activation_commands, $command);
	}elsif($section eq 'persistent'){
	    ## Commands that connect up the simulated pedals that make
	    ## an effect.
	    push(@jack_commands, $command);
	}
    }else{
	push(@mh_commands, $command);
    }
}
# print join("\n", @mh_commands);
# print join("\n", @jack_commands);

&mod_host(\@mh_commands);

foreach my $jcmd ( @jack_commands ) {
    &handle_jack( $jcmd );
}


