#!/usr/bin/perl -w
use strict;
use lib("$ENV{'Home120Proof'}/Perl");
use One20Proof;

## Debug with: o inhibit_exit=0

## Compose

## Facilitate composing live loops.  Recording via Jack and overdubbing

## Usage:
## 120Proof/bin/Compose -t <template> [-p <prefix>] [-b <backing track>]

## State machine:
## init => get ready to record a track.  Start state
my $init = 'init';
## recording => recording a track
my $recording = 'recording';
## dubbing => playing back main track and recording
my $dubbing = 'dubbing';

my $state = $init;

## Mesages to display to the user for each state
my %state_msg = (
    $init => 'Press <enter> to start recording',
    $recording => 'Press <enter> to start recording',
    $dubbing => 'Press <enter> to start overdubbing'
    );

## For all states append this message to the display
my $msg_sfx = ' <q> to quit.  <n> for next recording';

## `$template`: any files created during recording that match, are used
## as backing in the over dubbing.
my $template = undef;

## `$prefix` is prefixed to all track file names
my $prefix = undef;

# `$directory` and `prefix` are confused ATM
my $directory = undef;

# Whe overdubbing this is the track played
my $backing_track = undef;

## Process command line
my $ARGC = @ARGV;
for(my $i = 0; $i < ($ARGC - 1); $i+=2){
    ## The template for choosing which recorded audio to make a backing track
    $ARGV[$i] eq "-t" and $template = $ARGV[$i+1];

    ## The prefix to use (defaults to YYYYMMDDhhmmss)
    $ARGV[$i] eq "-p" and $prefix = $ARGV[$i+1];

    ## If a backing track passed go straight to dubbing
    $ARGV[$i] eq "-b" and $backing_track = $ARGV[$i+1] and $state = $dubbing;

    ## A directory can be passed.  This is used in audio/
    $ARGV[$i] eq "-d" and $directory = $ARGV[$i+1];
}

defined $template  or die "Must have an output template";
## Identifier for this session.
defined $prefix or $prefix = &std_pfx();
defined $directory or $directory = &std_dir();

## Directory to write all files to
my $data_dir = "$ENV{'Home120Proof'}/.compositions";
-d $data_dir or mkdir($data_dir) or die "$!: Cannot mkdir $data_dir ";

## Directory to save files with audio in
my $audio_dir = "$ENV{'Home120Proof'}/.compositions/audio";
-d $audio_dir or mkdir($audio_dir) or die "$!: Cannot mkdir $audio_dir ";

## Recorded files go in a directory named `$fn`
my $fn = 1;  

## Overdubs go in the same directory as the recordings, with the same
## name, with this prefix
my $dub = 1; ## Name dubs with this

# Set to the raw recording file name, and dub name, not extension, of
# a recording
my $fn_rec = undef;
my $fn_dub = undef;

## ?????
my $fn_dir = undef;

# The copy of `$prefix` used in recording
my $pfx = $prefix;

## `$JACKREC`  is a programme that reords all JAcl outputs as raw audio
my $JACKREC = &One20Proof::get_bin()."/jackrec_qzt";
-x $JACKREC or die "$!: $JACKREC";

## Programme to measure max amplitude of raw audio to reject silent files
my $AMPLITUDE = &One20Proof::get_bin()."/raw_audio_threshold_qzt";
-x $AMPLITUDE or die "$!:  $AMPLITUDE";

## Used to replay the recording hile overdubbing
my $PLAY = "/usr/bin/mplayer";
-x $PLAY or die "$!: $PLAY";

## If the programme is initialised with a backing track go straight to
## dubbing mode
if(defined $backing_track){
    if(! -r $backing_track){
        die "Unreadable backing track: $backing_track ";
    }else{
        $state = $dubbing;

        ## If the backing track is one this programme has made that can be
        ## used to help in the file name
        my $id = "";
        if($backing_track =~ /\d{14}(\S+).wav$/){
            $id = '_'.$1.'_';
        }
        ## Other wise if the file name is a reasonable name use it as id
        elsif($backing_track =~ /([a-zA-Z_\-\d\:\.]+)\.wav$/){
            $id = '_'.$1.'_';
        }
        $pfx = $prefix.$id;

        ## `$fn_rec` must be set here as normally it is set in recording
        $backing_track =~ /([^\/]+)\.wav$/ or die "Backing track is not WAV \n$backing_track\n";
        $fn_rec = $1;
    }
}
# ???
my $key;

## The input from the user.
my $inp = "\n";

while(1){
    chomp $inp;
    $inp eq 'q' and last;
    if($inp =~ /n\s*$/){
        #  Get ready for the next recording
        $fn++; 
        $state = $init;
    }

    ## Can `$directory` be undefined?
    defined($directory) or warn "\$directory is undefined!!\n";    
    if(defined($directory )){
        $audio_dir = "$ENV{'Home120Proof'}/.compositions/audio/$directory";
        -d $audio_dir or mkdir($audio_dir) or die "$!: mkdir $audio_dir";
    }
       
    if($state eq $init){

        ## Prepare to record a new track
        $backing_track = undef;
        
        $pfx = $prefix;
        ## Todo: Test what is present in the file system and set `$fn`
        ## accordingly
        warn "Do the work here to fix up file naming";

        $fn_dir = "$audio_dir/$fn";
        -d $fn_dir or mkdir($fn_dir) or die "$!: mkdir $fn_dir";

        # `$fn_rec` is the stem of the file name.  The name assigned
        # by jack_rec will be appended to it
        $fn_rec = "$fn_dir/$pfx";

        $state = "recording";
     } elsif($state eq "recording"){

        print "Press <enter> to stop recording\n";
        ## This blocks and returns a JSON object
        my $result = `$JACKREC $fn_rec`;
        print "Processing...\n";
        my %out_file_stats = &process_jackrec($result);
        my @possible_backing = grep{/$template/} keys %out_file_stats;
        my $avg = -9999999;
        foreach my $p (@possible_backing){
            my $_a = $out_file_stats{$p};
            if($_a != 0 and $_a > $avg){
                $avg = $_a;
                $backing_track = $p;

                # Use the first
                last; 
            }
        }
        defined($backing_track) or
            die "No matching file has audio in it. ".
            "Cannot make a backing track for dubbing";

        $state = $dubbing;
        print "$backing_track\n";
     }elsif($state eq "dubbing"){
        $fn_dub = $fn_rec."-$dub";
        $dub++; # Finished with this for now, get ready for next dub
        print "Press <enter> to stop overdubbing\n";
        &One20Proof::run_daemon("$PLAY -ao jack $backing_track") or die;
        ## This blocks and returns a JSON object
        my $result = `$JACKREC $fn_dub`;
        print `killall mplayer`;
        print "Processing\n";
        process_jackrec($result);
        
    }
    print "$state_msg{$state} $msg_sfx\n";
    $inp = <STDIN>;    
}

sub process_jackrec {

    ## Process the raw audio
    ## Return a hash of the wav files generated and their stats
    my $start  = time();
    my %result = ();
    my $result = shift or die "Pass jackrec_qzt output";
    $result =~ /output_files\": \[\s+(.+)\s+\]\s+}$/s;
    my $fns = $1;
    $fns =~ s/\s*\n\s*//g;
    my @fns = map{s/\"(.+)\"$/$1/; $_} split(/,/, $fns);

    
    foreach my $fn (@fns) {
        #        open(my $fh, $fn) or die "$!: $fn";
        my $amp = `$AMPLITUDE $fn`;
        # Only process files with audio with audio
        if($amp > 0.01){
            my $fn2 = $fn;
            $fn2 =~ s/raw$/wav/;
            # SOX command: sox -t raw -b 32 -e float -c 1 -r 48k "-1_yoshimi-Song1:left.raw" -e signed-integer -b 16  "-1_yoshimi-Song1:left.wav" 
            my $sox_cmd = "sox -t raw -b 32 -e float -c 1 -r 48k \"$fn\" -e signed-integer -b 16  \"$fn2\"";
            print "SOX command: $sox_cmd\n";
            print `$sox_cmd`;
            $result{$fn2} = peaks($fn2);
        }
        unlink $fn or die "$!: unlink $fn";
    }
    print("Processing files took: ".(time() - $start)." seconds\n");
    return %result;
    
}
# ffmpeg -i fooooo.wav -af astats=metadata=1:reset=1,ametadata=print:key=lavfi.astats.Overall.RMS_level:file=log.txt -f null -

sub std_pfx {
    return "Compose";
}
sub std_dir {
    my @t = localtime();
    return sprintf("%04d-%02d-%02dT%02d:%02d:%02d",
                   $t[5]+1900, $t[4]+1, $t[3], $t[2], $t[1], $t[0]);
}


## Calculate the maximum, the average, and the minimum volume
sub peaks {
    my $fn = shift or die;
    -r $fn or die "$!: Cannot read: $fn ";
    my $result = `ffmpeg -loglevel quiet -i $fn -af astats=metadata=1:reset=1,ametadata=print:key=lavfi.astats.Overall.RMS_level:file=- -f null - `;
    my @result = grep {/lavfi.astats.Overall.RMS_level=/} map{chomp; $_}split(/\n/, $result);
    my @data = map{/lavfi.astats.Overall.RMS_level=(\S+)/; $1} grep {$_ ne "lavfi.astats.Overall.RMS_level=-inf"} @result;
    my $positive_infinity = 99999999999;
    my $negative_infinity = -1 * $positive_infinity;
    
    my ($avg, $sum, $max, $min) = (0, 0, $negative_infinity, $positive_infinity);
    my $denom = scalar(@data);
    
    if ($denom ){
        foreach my $datum (@data){
            $sum += $datum;
            $datum > $max and $max = $datum;
            $datum < $min and $min = $datum;
            $avg = $sum / $denom;
        }
    }else{
        $max = 0;
        $min = 0;
        $avg = 0;
    }
    print sprintf("| %0.3f %0.3f %0.3f $fn \n", $avg, $min, $max);
    return $avg;
}
        
    
