#!/usr/bin/perl -w
use strict;
## InitialiseMidi
use lib("$ENV{'Home120Proof'}/Perl");
use One20Proof;

## Initialise  MIDI connections

## Find what MIDI connections are needed and wait for them. 
sub wait_for_midi( $ ) {
    my $cfg_fn = shift or die;
    
    open(my $cfg, $cfg_fn) or die $!;

    ## The keys of %connections are the MIDI devices that must exist
    ## becaue they are in the configuration file.  The values are 0
    ## initially and set to 1 if the connection is found
    my %connections = ();
    my $flag = 0;
    while(my $line = <$cfg>){
        $line =~ /MIDI_Connections/ and $flag = 1 and next;
        $line =~ /^\s*#/ and next;

	## Blank line ends yje MIDI section
        $line =~ /^\s*$/ and $flag = 0;

        if($flag){
            my ($c1, $c2) = process_midi_line($line);
            $connections{$c1} = 0;
            $connections{$c2} = 0;
        }

    }

    my $start = time();
    while(1){
        my @aconnect_l = `aconnect -l`;
        
        my $lhs = undef;
        foreach my $ac (@aconnect_l){
            chomp $ac;
            ## client 28: 'Launchpad X' [type=kernel,card=3]
            if ($ac =~ /^client \d+: '([^\']+)'/){
                $lhs = $1;
                next;
            }
            
            ##     0 'Launchpad X MIDI 1'
            if($ac =~ /^\s+\d+\s+'\s*(\S[^']+\S)\s*'/){
                my $rhs = $1;
                defined($lhs) or die "No \$lhs.  \$ac: $ac ";
                $connections{"$lhs:$rhs"} = 1;
                next;
            }

            ##      Connecting To: 128:0, 131:0
            ##      Connected From: 128:0
            
            if($ac =~ /^\s+Conn/){
                next;
            }
            die "\"$ac\"";
        }
        ## Loop exit condition
        my @disconnected = grep{$connections{$_} == 0} keys(%connections);
        @disconnected or last;
        print STDERR  "Not connected:\n\t".join("\n\t", @disconnected)."\n";

        ## Failure condition.  
        my $now = time();
        $now - $start > 5 and die "These MIDI endpoints never appeared: " .
            join(', ', grep{$connections{$_} == 0} keys(%connections));
        
        sleep 1;
    }
}

## Extract the MIDI connections out of the config file
## Each line is two parts separated by a TAB
sub process_midi_line( $ ){
    my $line = shift or die;
    chomp $line;

    $line =~ /^([^\t]+)\t([^\t]+)$/  or die "'$line'";
    my @result =  ($1, $2);

    @result;
}    


sub set_up_midi( $ ) {
    my $cfg_fn = shift or die;

    ## Map port:device  names to string
    my %midi_devices_by_num = ();
    ## Map port:device  string to names 
    my %midi_devices_by_str = ();
    
    ## Get all the connections devices
    my @aconnect_l = `aconnect -l`;

    ## Store the connections requested in the config file
    my @connections = ();
    
    ## Read in the midi connections that are wanted from the
    ## configuration file
    open(my $cfg, $cfg_fn) or die $!;
    my $flag = 1;
    while(my $line = <$cfg>){
        $line =~ /__END__/ and last;
        $line =~ /^MIDI_Connections/ and $flag = 1 and next;
        $line =~ /^\s*#/ and next; ## Comments
        if($line =~ /^\s*$/){
            next;
        }
        if($flag){
            my ($c1, $c2) = process_midi_line($line);
            push(@connections, [$c1, $c2]);
        }
    }

    ## Store the existing connections in a way that can be passed to
    ## `aconnect -d`.  Each connection that we to delete is mentioned
    ## in a "Connecting To" and in a "Connected From" clause.  The
    ## keys of the HASHs are the strings for `aconnect -d`
    my %existing_connections_to = ();
    my %existing_connections_from = ();
    my $port_str = undef;
    my $port_num = undef;
    my $dev_num = undef;
    my $dev_str =  undef;

    foreach my $ac  (@aconnect_l){
        chomp $ac;
        # client 24: 'pisound' [type=kernel,card=2]
        if ($ac =~ /^client (\d+): '([^\']+)'/){
            $port_num = $1;
            $port_str = $2;
            next;
        }

        #     0 'pisound MIDI PS-0N78HB5'
        if($ac =~ /^\s+(\d+)\s+'\s*(\S[^']+\S)\s*'/){
            $dev_num = $1;
            $dev_str =  $2;
            defined($port_num) or die "No \$port_num.  \$ac $ac ";
            defined($port_str) or die "No \$port_str.  \$ac $ac ";
            ## Have port:dev as string and number
            $midi_devices_by_str{"$port_str:$dev_str"} = [$port_num, $dev_num];
            $midi_devices_by_num{"$port_num:$dev_num"} = [$port_str, $dev_str];
            next;
        }
        #	Connecting To: 129:0[real:0], 130:0, 131:0
        if($ac =~ /^\s+Connecting To: (.+)\s*$/){
            my $con_str = $1;
            my @con_str = split(/,\s*/, $con_str);

            ## @con_str is an array of port:dev that this device is
            ## connectred to
            
	    my $translate_connection_num_str = sub  {
		my $conn = shift or die;
		my ($lhs, $rhs) = $conn =~ /^(\S+)\s(\S+)$/ or die $conn;
		my $slhs = $midi_devices_by_num{$lhs} // ["<undef>", "<undef>"];
		my $srhs = $midi_devices_by_num{$rhs} // "<undef>:<undef>";
		return $slhs->[0].':'.$slhs->[1];
	    };

            foreach my $pair (map{/^\s*(\d+):(\d+)/; [$1,$2]} @con_str){
                defined($port_num) or die "No \$port_num.  \$ac $ac ";
                defined($dev_num) or die "No \$dev_num.  \$ac $ac ";
                my $midi_connection = "$port_num:$dev_num $$pair[0]:$$pair[1]";

                # One side of the equation
                print STDERR  "connecting to: ".&$translate_connection_num_str($midi_connection)."\n";
                $existing_connections_to{$midi_connection} = 1;
            }
            next;
        }
        #	Connected From: 24:0, 28:0, 28:1, 32:0, 129:0
        if($ac =~ /^\s+Connected From:\s+(.+)/){
            my $con_str = $1;
            my @con_str = split(/,\s*/, $con_str);

            ## @con_str is an array of port:dev that connets to this
            ## device

            foreach my $pair (map{/^\s*(\d+):(\d+)/; [$1,$2]} @con_str){
                defined($port_num) or die "No \$port_num.  \$ac $ac ";
                defined($dev_num) or die "No \$dev_num.  \$ac $ac ";
                my $midi_connection = "$$pair[0]:$$pair[1] $port_num:$dev_num";

                # # The other side of the equation
                print STDERR  "connecting from: $midi_connection\n";
                $existing_connections_from{$midi_connection} = 1;
            }
            next;
        }
    }
    
    
    my %existing_connections = ();
    foreach my $key (keys %existing_connections_to){
	$key =~ /^(\S+)\s(\S+)$/ or die $key;
	my $lhsa = $midi_devices_by_num{$1};
	my $rhsa = $midi_devices_by_num{$2};
	(defined($lhsa) and defined($rhsa)) or next;
	my $lhs = join(":", @$lhsa);
	my $rhs = join(":", @$rhsa);
	$existing_connections{$lhs} = $rhs;
    }

    my  $get_connections_for = sub {
	my $device = shift or die;
	my @keys = grep {defined} map{
	    my $connection = "$_\t$existing_connections{$_}";
	    if($_ =~ /$device/){
		$connection;
	    }elsif($existing_connections{$_} =~ /$device/){
		$connection;
	    }else{
		undef;
	    }
	}keys %existing_connections;
	return @keys;
    };

    # ALl devices in $cvg
    my %cfg_devices = ();
    foreach my $c (@connections){
	my ($d0) = $c->[0] =~ /^(.+):/;
	my ($d1) = $c->[1] =~ /^(.+):/;
	$cfg_devices{$d0} = 1;
	$cfg_devices{$d1} = 1;
    }
    my @cfg_devices = keys %cfg_devices;
    ## The connections that have to be deleted will be in both HASHs.
    ## Initialise the list of connections to delete to all connections
    my %connections_to_delete = ();
    my @cn = ();
    foreach my $d ( @cfg_devices){
	my @tmp =  &$get_connections_for($d);
	push @cn, @tmp;
    }
    foreach my $cn (@cn){
	my ($d1, $d2) = $cn =~ /^(.+)\t(.+)/ or die $cn;
	$connections_to_delete{"$midi_devices_by_str{$d1}->[0]:$midi_devices_by_str{$d1}->[1] $midi_devices_by_str{$d2}->[0]:$midi_devices_by_str{$d2}->[1]"} = 1;
    }
    print "connections_to_delete before:\n".join("\n", keys %connections_to_delete)."\n";
    my %connections_to_make = ();
    foreach my $c (@connections){
	my $d0 = $midi_devices_by_str{$c->[0]};
	my $d1 = $midi_devices_by_str{$c->[1]};
	my $cn = "$d0->[0]:$d0->[1] $d1->[0]:$d1->[1]";
	delete($connections_to_delete{$cn});
	$connections_to_make{$cn} = 1;
    }
    print "connections_to_delete after:\n".join("\n", keys %connections_to_delete)."\n";
    print "connections to make\n".join("\n", keys %connections_to_make)."\n";
    # foreach my $to (sort keys(%existing_connections_from)){
    #     if (defined($existing_connections_to{"$to"})){
    # 	    $to =~ /^(\S+)\s(\S+)$/ or die $to;
    # 	    print STDERR  "connections to delete: ".join(":", @{$midi_devices_by_num{$1}})." -> ".join(":", @{$midi_devices_by_num{$2}})."\n";
    #         $connections_to_delete{$to} = 1;
    #     }
    # }
    ## %connections_to_delete the keys are strings to pass to
    ## %`aconnect -d` and are all MIDI connections
    ## %connections_to_make  the keys are strings to pass to
    ## %`aconnect ` and are all MIDI connections

    foreach my $cn (keys %connections_to_delete){
	print `aconnect -d $cn`;
    }
    foreach my $cn (keys %connections_to_make){

	print `aconnect  $cn`;
    }
    print "Done\n";
}

## Parse output of aconnect -l to make a list of all MIDI connections  that
## 120Proof can use.  There is no accessible documentation for the format
## of this output.

## Use multiple passes of the data:

## The data is divided into client records.
## Each client record starts with /^client (\d+):[^\[]+\[([^\]]+)\]$/
## The client number is $1.
## $2 is an array.  The first entry is "type=<type>". Types can be kernel,
## or user.  If there is a second argument it is "pid=<PID>" where the
## process that owns this is PID, or "card=<Card number>" which matches a
## device attached to the computer.

## The client records are divided into port records.
## Each port record starts with /^\s+(\d+)\s\'([^\']+)$/.
## $1 is the port number.  The deviceID is "<device number>:<port number>"
## uniquely describe one end of a MIDI connection.

## Each port record has 0, 1, or 2 lines /^\s+Connected From: \[(.+)\]/ or
## /^\s+Connecting To: \[(.+)\]/.
## $1 are devices "<device number>:<port number>".  For device "128:0"
## sometimes it is: "128:0[real:0]".


## Parse 1.  Build an array of port records for clients with a PID or
## card. .  (Just the connecting To lines will be enough).  In each
## record store device number, port number, PID or card, and
## connecting to line.  Subsequent parses are over this array

## Parse 2: Get the devceID of every client record with a PID or card number.
## Put these in @device_ids 

## Parse 3: For every port record with a deviceID $prID where $prID is in  @device_ids, evry deviceID in the ConectingTo line, $clID, if $clID is in @deviceIDs then "$prID $clID" is a connection that 120Proof cares about.

sub list_all_midi {

    my @aconnect_l = `aconnect -l`;
    ## Store the existing connections in a way that can be passed to
    ## `aconnect -d`.  Each connection that we to delete is mentioned
    ## in a "Connecting To" and in a "Connected From" clause.  The
    ## keys of the HASHs are the strings for `aconnect -d`
    my %existing_connections_to = ();
    my %existing_connections_from = ();

    ## Map port:device  names to string
    my %midi_devices_by_num = ();
    ## Map port:device  string to names 
    my %midi_devices_by_str = ();
    

    my $port_str = undef;
    my $port_num = undef;
    my $dev_num = undef;
    my $dev_str =  undef;

    foreach my $ac  (@aconnect_l){
        chomp $ac;
        # client 24: 'pisound' [type=kernel,card=2]
        if ($ac =~ /^client (\d+): '([^\']+)'/){
            $port_num = $1;
            $port_str = $2;
            next;
        }

        #     0 'pisound MIDI PS-0N78HB5'
        if($ac =~ /^\s+(\d+)\s+'\s*(\S[^']+\S)\s*'/){
            $dev_num = $1;
            $dev_str =  $2;

            ## Have port:dev as string and number
            $midi_devices_by_str{"$port_str:$dev_str"} = [$port_num, $dev_num];
            $midi_devices_by_num{"$port_num:$dev_num"} = [$port_str, $dev_str];
            next;
        }
        #	Connecting To: 129:0[real:0], 130:0, 131:0
        if($ac =~ /^\s+Connecting To: (.+)\s*$/){
            my $con_str = $1;
            my @con_str = split(/,\s*/, $con_str);

            ## @con_str is an array of port:dev that this device is
            ## connectred to
            
            foreach my $pair (map{/^\s*(\d+):(\d+)/; [$1,$2]} @con_str){
                my $midi_connection = "$port_num:$dev_num $$pair[0]:$$pair[1]";

                # One side of the equation
                $existing_connections_to{$midi_connection} = 1;
            }
            next;
        }
        #	Connected From: 24:0, 28:0, 28:1, 32:0, 129:0
        if($ac =~ /^\s+Connected From:\s+(.+)/){
            my $con_str = $1;
            my @con_str = split(/,\s*/, $con_str);

            ## @con_str is an array of port:dev that connets to this
            ## device

            foreach my $pair (map{/^\s*(\d+):(\d+)/; [$1,$2]} @con_str){
                my $midi_connection = "$$pair[0]:$$pair[1] $port_num:$dev_num";

                # # The otehr side of the equation
                $existing_connections_from{$midi_connection} = 1;
            }
            next;
        }	    
    }
    
    my @ret = ();
    push(@ret, keys(%existing_connections_to));
    push(@ret, keys(%existing_connections_from));
    return @ret;
}

sub delete_all(){
    my @all_midi = &One20Proof::list_all_midi();
    foreach my $midi_desc (@all_midi){
        my $disconnect_string =
            "aconnect -d $$midi_desc[0]:$$midi_desc[1] $$midi_desc[2]:$$midi_desc[3]"; 
        print `$disconnect_string`;
    }
}

my $arg = shift or die "pass an argument";


if($arg eq "list"){
    ## List all alsa NIDI  connections
    my %devices = &One20Proof::all_midi_devices;
    
    my $sort = sub {
        ## Sort by PID if possible
        ## Sort lexicographically otherwise
        ## Records with PIDs go first
        ## client 28: 'Launchpad X' [type=kernel,card=3]
        ## client 28: 'Launchpad X' [type=user,PID=332]
        my $va = $devices{$a};
        my $vb = $devices{$b};
        my $pida = 0;
        my $pidb = 0;
        $va =~ /pid=(\d+)/ and $pida = $1;
        $vb =~ /pid=(\d+)/ and $pidb = $1;
        if($pida and !$pidb){
            # $va has pid but not $vb
            return -1;
        }
        if(!$pida and $pidb){
            # $vb has pid but not $va
            return 1;
        }
        if($pida && $pidb){
            $pida <  $pidb and return -1;
            $pida >  $pidb and return 1;
        }
        ## Neither $va nor $vb have PID or $pida == $pidb
        return $va cmp $vb;
    };
    
    foreach my $key (sort $sort keys(%devices)){
        # perl -e '$t = <>; $t =~ s/.+\/([^\/]+)/$1/; print $t;'`;
        my $line = $devices{$key};
        if($line =~ /pid=(\d+)/){
            my $pid = $1;
            # 27209 pts/6    Sl+    0:00 /home/patch/120Proof/bin/lpx_controll
            #  9061 ?        SLl  119:03 /usr/local/bin/pd -jack -path /home/patch/120Proof/pd_patches/ -send ; pd dsp 1 -stdpath -nogui /home/patch/120Proof/pd_patches/instruments/HarpPoly.pd

            my $name;
            my $_name;
            if($_name = join "", map{/$ENV{'Home120Proof'}\/bin\/(\S+)/ and $1} grep{/$pid/} `ps x`
               or
               $_name = join "", map{/usr\/local\/bin\/(\S+)/ and $1} grep{/$pid/} `ps x`){
                $name = $_name;
            }else{
                $name = "???";
            }
            $line .= " $name";
        }
        print "$key\t$line\n";
    }
    my @connections = &One20Proof::list_all_midi_connections; 
    foreach my $c (@connections){
        
        print join("\t", @$c)."\n";
    }
}elsif($arg eq "delete"){
    &delete_all();
}else{
    my $cfg_fn = $arg;
    -r $cfg_fn or die "$!: $cfg_fn";
    &wait_for_midi( $cfg_fn );
    &set_up_midi( $cfg_fn );
}
