#!/usr/bin/perl -w
use strict;

use lib("$ENV{'Home120Proof'}/Perl");
use One20Proof qw | $MODEP_PEDALS $PEDAL_DIR |;

## Read the files that modep writes and write out the set of commands
## for mod-host, jack, and midi to implement the modep pedal boards
##
## The frst argument is the command file.
## The rest of the arguments are boards to ignore, Not all boards built by GUI are desirable.
##
## E.g: $ENV{"Home120Proof"}/bin/ExtractModep $modep_command_fn Looper Harp_Sweetner ORGANS ORGANS_Sweet
my $modep_command_fn = shift or die;
my @ignore_boards = ();
foreach my $ignored_board (@ARGV){
    push(@ignore_boards, $ignored_board);
}

my $VERBOSE = 0;

## Where to find pedal definitions
my $PEDAL_DEF_DIR = $One20Proof::MODEP_PEDALS;

## Reads the modep configuration files for pedals and sets them all up
## in mod-host.  For each pedal it writes a file in the appropriate
## directory to implement the pedal by connecting jack IO

## Keyed by the name of a effect, values are the instance number 
my %effect_name_instance = ();

## Passed a prefix and a file name returns an array of mod-host command
## strings.  The returned strings have as instance numbers the effect
## name prefixed with the passed prefix (this allows the same effect
## to be used in different ways) 
sub process_file( $$ ) {
    my $prefix = shift or die;
    my $fn = shift or die;

    $fn =~ s/-\d\d\d\d\d\.ttl$/\.ttl/; ## TODO: WTF??

    $VERBOSE and print STDERR "Process $prefix  $fn\n";
    my $fh = undef;
    unless( -r $fn and open($fh, $fn)){
	$VERBOSE and warn "process_modep: $!: $fn\nprocess_modep: Abandon this pedal board\n";
	return ();
    }

    ## Decode the Turtle file
    my @lines = One20Proof::read_turtle($fn) or die "Cannot process $fn";





    my @ret = ();
  
    # TODO: Not any more.  Now use read_turtle so do not need
    # most (all?) of these variables.
  
#   # ## Channels between effects and the outside 
    # my %channels = ();
    # my $channel = ''; # The last channel seen 

    my %effects = ();
    my $EFFECT = ""; # The last effect seen

    # The last port seen
    my $port = "";

    ## Keep track of sources and sinks to create Jack pipes
    my $source = undef;
    my $sink = undef;
    my @jack_pipes = ();

    ## Keep track of jack ports found so they can be distinguished
    ## from effects. TODO: What does that mean?
    my %jack_ports = ();
    
    my $ln = 0;

    ## Hack to get propper name of pedalboard It is in line of form:
    ## "doap:name <Name>" The name is put in position zero of returned
    ## array 
    my $name = undef;



    ## We need to get the instructions needed to initialise this
    ## effect and turn it on.

    ## Need: 

    ## add <lv2_uri> <instance_number> Record what instance number
    ## goes with what effect so it can be communicated to the user.  

    ## param_set <instance_number> <param_symbol> <param_value>
    ## Set up the effect in the way it was saved from mod-ui

    ## Tripples and their meanings
    ## predicate == "lv2:prototype" => subject is an effect, object is the URL.
    ## ......... <DS1> lv2:prototype <http://moddevices.com/plugins/mod-devel/DS1> 
    ## _________ Use for the "add" command
    ## predicate == ingen:arc => object names a Jack connection.
    ## .........   "<> ingen:arc _:b1"
    ## _________  Use in "jack_connect" commands
    ## predicate == lv2:port => subject is a device and object is a port of that device
    ## ......... <DS1> lv2:port  <DS1/Out1>
    ## ......... <DS1> lv2:port  <DS1/Tone>

    ## predicate == ingen:tail => subject is a Jack connection, object is where it starts
    ## predicate == ingen:head => subject is a Jack connection, object is where it ends
    ## .........  "_b2 ingen:tail <bitta/output>" 
    ## .........  "_b1 ingen:head <playback_1>
    ## predicate == a  => subject is of type object
    ## .........  <DS1/In> a lv2:AudioPort
    ## .........  <DS1/In> a lv2:InputPort
    ## _________  Use in "jack_connect" commands
    ## .........  <bitta/drywet> a lv2:ControlPort
    ## _________  Use in "param" commands
    ## predicate == "ingen:value" and subject == a control port of a device => object is a value to set a port
    ## .........  <bitta/drywet> ingen:value 1.000000
    ## _________  Use for the "param" command

    ## .........  
    ## .........  

    ## Each effect is setup in this hash.
    ## Indexed by the name
    # my %effects = {};
    
    ## each entry om @line is a tripple as text.  Convert into an
    ## array of arrays, each with three elements: subject, predicate,
    ## object
    my @tripples = map {
	chomp;
	/^(\S+)\s+(\S+)\s+(.+)/ or die $_;
	[$1, $2, $3]
    } @lines;

    ## Get the commands to add
    my @prototypes = grep {$_->[1] eq "lv2:prototype" } @tripples;

    ## For creating LV2 effects, each effect has a number. `$index` holds it
    my $index = 1;

    # To map numbers names
    my %name_number = ();
    my %number_name = ();
    
    foreach my $prototype (@prototypes){
	my ($name, $predicate, $uri) = @$prototype;

	## The name is in angle brackets
	$name =~ /^<(\S+)>$/ or die "Badly formed subject: $name ";
	$name = $1;

	$predicate eq "lv2:prototype" or die "Error in prototypes: $predicate";

	## Initialise the effect hash 
	$effects{$name} = {};
	$effects{$name}->{lv2_commands} = {};
	$effects{$name}->{lv2_commands}->{param} = [];
	$effects{$name}->{lv2_commands}->{add} = "add $uri $index";
	$name_number{$name} = $index;
	$number_name{$index} = $name;
	$index += 1;
    }

}

## Get the ttl file that holds all the pedal board definitions
sub get_board_ttl( $$$ ){
    my ($root, $name, $board) = @_;
    my $fn = "$root/$name/$board.ttl";
    if(! -r $fn){
	$board = ucfirst($board);
	$fn = "$root/$name/$board.ttl";
    }
    return $fn;
}

## This prefix is used so the same LV2 units can be used more than
## once for different pedal boards
my $prefix = 'a';

## All directories with a ".pedalboard" suffix have a pedal board
## definition
opendir(my $dir, $PEDAL_DEF_DIR) or die "$!: $PEDAL_DEF_DIR";
my @names = grep { /\.pedalboard$/ } readdir($dir);

## For each pedalboard directory, collect the mod-host command strings
## to set up the effects in @commands
my @commands = ();
foreach my $name (sort @names){
    $name =~ /^(\S+)\.pedalboard$/ or die $name;
    my $board = $1;
    $VERBOSE  and print STDERR "board: $board\n";
    if(!grep {/^$board$/} @ignore_boards){

	my $fn = &get_board_ttl($PEDAL_DEF_DIR, $name, $board);
	
	# print STDERR "Process: $fn\n";
	my @board_commands = &process_file($prefix, $fn);
	if(@board_commands){
	    ## First element is the name of the pedal board.
	    my $name_line = shift(@board_commands);
	    if($name_line =~ /name:\s(.+)/){
		$name = $1;
	    }else{
		warn "Bad name_line, no board name: $name_line \n";
	    }
	    push(@commands, [$board, \@board_commands]);
	    $prefix++;
	}
    }
}

## Replace instance numbers with integers. `%effects_name_instance` is
## a global that process_file maintains as a side effect
my $inst = 1; ## Initial number
foreach my $key (sort keys %effect_name_instance){
    $VERBOSE  and print STDERR "For $key: " .
	$effect_name_instance{$key}." -> $inst\n";
    $effect_name_instance{$key} = $inst++;
}

## Now have propper instance numbers for each effect.  Apply them

## The commands to set up pedal boards indexed by board name
my %pedal_settings = ();
foreach my $cc (@commands){

    ## Get the name for the pedal board and the set of commands that
    ## enable it in mod-host

    my $name = $cc->[0];
    my @cmds = @{$cc->[1]};
    
    defined($pedal_settings{$name}) and die "$name";
    $pedal_settings{$name} = [];
    foreach my $c (@cmds){

	## Take a mod-host command and match it with its device number
	## stored in %effect_name_instance

	if($c =~ /^param_set/ ||
	   $c =~ /^add /) {

	    foreach my $in(sort keys %effect_name_instance){
		$c =~ s/$in/$effect_name_instance{$in}/g;
	    }
	}elsif($c =~ /jack_con/){
	    foreach my $in(sort keys %effect_name_instance){
		$c =~ s/$in\//effect_$effect_name_instance{$in}:/g;
	    }
	}	
	push(@{$pedal_settings{$name}}, $c);
    }
}

## Commands to run now to set up the pedals indexed by board name
my %control_commands = ();

## Commands to run when the pedal is used.  Mostly (only?) JACK
## connections
my %pedal_commands = ();

foreach my $name ( sort keys %pedal_settings){

    $VERBOSE  and print STDERR "Set up $name\n";
    $pedal_commands{$name} = [];
    $control_commands{$name} = [];
    
    my @commands = @{$pedal_settings{$name}};

    foreach my $cmd (@commands){
	$VERBOSE  and print STDERR "cmd: $cmd\n";
	if($cmd =~ /^jack_connect\s+(.+)\s*$/){
	    ## If this command involves system:capture or system:playback
	    ## then it is to be run at pedal use time.  Else run it now
	    my $jack_cmd = $1;

	    my $flag = 0;
	    $jack_cmd =~ s/playback/system:playback/ and $flag = 1;
	    $jack_cmd =~ s/capture/system:capture/ and $flag = 1;
	    if($flag == 1){
		## To be run at pedal use time.
		push(@{$pedal_commands{$name}}, $jack_cmd);
	    }else{
		push(@{$control_commands{$name}}, "mh connect $1");
	    }
	}else{
	    ## All mod-host  commands run now
	    push(@{$control_commands{$name}}, "mh $cmd");
	}
    }
}

my $pedal_dir = $One20Proof::PEDAL_DIR;

-d $pedal_dir or mkdir $pedal_dir or die "$!: Cannot mkdir $pedal_dir";

## Delete old pedals
opendir(my $pedals, $pedal_dir) or die "$!: $pedal_dir ";
my @files =
    grep{/^[a-zA-Z0-9_]\S/} ## Filter out the pedal links which are single character
readdir($pedals);
foreach my $file (@files){
    
    my $df = "$pedal_dir/$file"; 
    unlink $df or die "$!: $file";
}

open(my $collected_commands, ">$modep_command_fn") or die "$!: Couldnot open $modep_command_fn to write";

foreach my $name (sort keys %control_commands){

    
    my $cmds = join("\n", @{$control_commands{$name}});

    print $collected_commands "NAME $name\n$cmds\n";
    print $collected_commands "ACTIVATE\n";
    print $collected_commands join("\n", map{"mh connect $_"} @{$pedal_commands{$name}})."\n";
    print $collected_commands "ENDS\n";
}
