#!/usr/bin/perl -w
use strict;
use FileHandle;
## Monitor output/*.out and *.err and report on state of system

## Open every file in the output diretctory and monitor the output.

## Encode here knowledge about what 120Proof programmes ouitput.  This is tightly linked.


$|++; #Flush
use lib("$ENV{'Home120Proof'}/Perl");
use One20Proof;


my $output_dir = "$ENV{'Home120Proof'}/output/";
opendir(my $dir, $output_dir) or die "$! $output_dir";

# Get all the input files
my @files = grep {$_ =~ /[a-z]/} grep{$_ !~ /~/} readdir($dir) or die $!;

my %fh = ();
my $bits = '';
foreach my $fn (@files){
    # my $fh = FileHandle->new(
    open(my $fh, "$output_dir/$fn") or die "$!: $fn ";
    vec($bits, fileno($fh),  1) = 1;

    ## Associate a file name and file handle
    $fh{$fn} = $fh;
}


## The state of 120Proof.  
my %state  = ();

## $length is the amount of data to read at a tmime from file handle
## If missing data from file $bytes_read will be == $length.
## So increase $length
##my $length = 1;
my $length = 4096;
while(1){
    my ($a, $b) = select(my $bytes = $bits, undef, undef, undef);
    if($a == -1){
	warn "$! Fail";
    }else{
	## Got some data
	my $buffer;

	foreach my $fn (sort keys %fh){
	    ## Check each file
	    my $bytes_read = sysread($fh{$fn}, $buffer, $length);
	    if($bytes_read == $length){
		warn "Length => $length -> ".($length*2)." ";
		$length *= 2;
	    }
	    if($bytes_read > 0){
		## Got some data.
		my @lines = split(/\n/, $buffer);

		if($fn =~ /^(.+).err$/){
		    # All the errors
		    print join("", map{"$1 e $_\n"} @lines);
		}elsif($fn =~ /^(.+).out$/){
		    # All the stdout
		    print join("", map{"$1 o $_\n"} @lines);
		}else{
		    print "$fn\n";
		}
		# print("$fn: Looped: \$bytes_read: $bytes_read \n");

		## Check for xruns
		if(grep {/xrun reported/} @lines){
		    $state{xrun} = time();
		}
	    }

	}
    }
}
